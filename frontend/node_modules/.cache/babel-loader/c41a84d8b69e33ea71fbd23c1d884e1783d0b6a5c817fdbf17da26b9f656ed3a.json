{"ast":null,"code":"import{Navigate}from'react-router-dom';import{jsx as _jsx}from\"react/jsx-runtime\";function ProtectedRoute(_ref){var children=_ref.children,adminOnly=_ref.adminOnly;// Check if the user is authenticated by retrieving a token from local storage\nvar isAuthenticated=localStorage.getItem('token');// Get the user's role from local storage\nvar userRole=localStorage.getItem('userRole');// If the user is authenticated\nif(isAuthenticated){// Check if the 'adminOnly' prop is provided and user role is 'admin'\nif(!adminOnly||adminOnly&&userRole==='admin'){return children;}else{return/*#__PURE__*/_jsx(Navigate,{to:\"/\",replace:true});}}// If the user is not authenticated, navigate to the login page ('/login') and replace the current entry in the history\nreturn/*#__PURE__*/_jsx(Navigate,{to:\"/login\",replace:true});}export default ProtectedRoute;","map":{"version":3,"names":["Navigate","jsx","_jsx","ProtectedRoute","_ref","children","adminOnly","isAuthenticated","localStorage","getItem","userRole","to","replace"],"sources":["C:/Users/Matthew Liebenberg/Dropbox/ML20070003344/3- Full Stack Web Development/L3T15/Capstone Final/frontend/src/components/ProtectedRoute.js"],"sourcesContent":["import { Navigate } from 'react-router-dom';\r\n\r\nfunction ProtectedRoute({ children, adminOnly }) {\r\n    // Check if the user is authenticated by retrieving a token from local storage\r\n    const isAuthenticated = localStorage.getItem('token');\r\n    // Get the user's role from local storage\r\n    const userRole = localStorage.getItem('userRole');\r\n\r\n    // If the user is authenticated\r\n    if (isAuthenticated) {\r\n        // Check if the 'adminOnly' prop is provided and user role is 'admin'\r\n        if (!adminOnly || (adminOnly && userRole === 'admin')) {\r\n            return children;\r\n        } else {\r\n            return <Navigate to=\"/\" replace />;\r\n        }\r\n    }\r\n\r\n    // If the user is not authenticated, navigate to the login page ('/login') and replace the current entry in the history\r\n    return <Navigate to=\"/login\" replace />;\r\n}\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":"AAAA,OAASA,QAAQ,KAAQ,kBAAkB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE5C,QAAS,CAAAC,cAAcA,CAAAC,IAAA,CAA0B,IAAvB,CAAAC,QAAQ,CAAAD,IAAA,CAARC,QAAQ,CAAEC,SAAS,CAAAF,IAAA,CAATE,SAAS,CACzC;AACA,GAAM,CAAAC,eAAe,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CACrD;AACA,GAAM,CAAAC,QAAQ,CAAGF,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAEjD;AACA,GAAIF,eAAe,CAAE,CACjB;AACA,GAAI,CAACD,SAAS,EAAKA,SAAS,EAAII,QAAQ,GAAK,OAAQ,CAAE,CACnD,MAAO,CAAAL,QAAQ,CACnB,CAAC,IAAM,CACH,mBAAOH,IAAA,CAACF,QAAQ,EAACW,EAAE,CAAC,GAAG,CAACC,OAAO,MAAE,CAAC,CACtC,CACJ,CAEA;AACA,mBAAOV,IAAA,CAACF,QAAQ,EAACW,EAAE,CAAC,QAAQ,CAACC,OAAO,MAAE,CAAC,CAC3C,CAEA,cAAe,CAAAT,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}